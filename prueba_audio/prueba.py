import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
import matplotlib.pyplot as plt

# === CONFIGURACI√ìN DEL MICR√ìFONO ===
DURATION = 10               # Duraci√≥n de la grabaci√≥n en segundos
SAMPLE_RATE = 44100        # Frecuencia de muestreo en Hz
DEVICE_INDEX = 0           # √çndice del micr√≥fono USB
CHANNELS = 1               # Mono (el micr√≥fono ML1-TRWCF es omnidireccional mono)
DTYPE = 'int16'            # Formato de grabaci√≥n

# === GRABACI√ìN ===
print("üéôÔ∏è Grabando audio...")
frames = int(DURATION * SAMPLE_RATE)
recording = sd.rec(
    frames,
    samplerate=SAMPLE_RATE,
    channels=CHANNELS,
    dtype=DTYPE,
    device=DEVICE_INDEX
)
sd.wait()
print("‚úÖ Grabaci√≥n finalizada.")

# === GUARDAR ARCHIVO WAV ===
output_path = "output_mic1.wav"
wav.write(output_path, SAMPLE_RATE, recording)
print(f"üíæ Audio guardado en: {output_path}")

# === PROCESAMIENTO PARA VISUALIZACI√ìN ===
# Convertimos a float32 para an√°lisis matem√°tico
recording_float = recording.astype(np.float32) / np.max(np.abs(recording))

# Calcular energ√≠a RMS (nivel general del audio)
rms = np.sqrt(np.mean(recording_float**2))
print(f"üìä RMS (energ√≠a de la se√±al): {rms:.4f}")

# === GRAFICAR FORMA DE ONDA ===
time_axis = np.linspace(0, DURATION, num=frames)

plt.figure(figsize=(10, 4))
plt.plot(time_axis, recording_float, linewidth=1)
plt.title("Forma de onda del micr√≥fono ML1-TRWCF")
plt.xlabel("Tiempo [s]")
plt.ylabel("Amplitud normalizada")
plt.grid(True)
plt.tight_layout()
plt.show()
